
PoE_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800237c  0800237c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800237c  0800237c  0001237c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002384  08002384  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800238c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000018c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000198  20000198  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000569b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001909  00000000  00000000  0002571a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005f8  00000000  00000000  00027028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000464  00000000  00000000  00027620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002039f  00000000  00000000  00027a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007bb9  00000000  00000000  00047e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c25a2  00000000  00000000  0004f9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001628  00000000  00000000  00111f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001135a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002330 	.word	0x08002330

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002330 	.word	0x08002330

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fba0 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f812 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f87a 	bl	80005dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SerialDebug( strcpy((char*) debugBuff, "\r\n") );
  SerialDebug( strcpy((char*) debugBuff, "---------Bootloader Running\r\n") );
#endif
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ee:	4804      	ldr	r0, [pc, #16]	; (8000500 <main+0x28>)
 80004f0:	f001 f998 	bl	8001824 <HAL_GPIO_WritePin>

  readSettingsFromFlash(&poeSettings);
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <main+0x2c>)
 80004f6:	f000 fa7b 	bl	80009f0 <readSettingsFromFlash>

  updateCheck();
 80004fa:	f000 f8c1 	bl	8000680 <updateCheck>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <main+0x26>
 8000500:	40020c00 	.word	0x40020c00
 8000504:	20000028 	.word	0x20000028

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fed0 	bl	80022bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800057c:	23a8      	movs	r3, #168	; 0xa8
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f963 	bl	8001858 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f9ea 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fbc4 	bl	8001d48 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f9d3 	bl	8000970 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_GPIO_Init+0x9c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <MX_GPIO_Init+0x9c>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_GPIO_Init+0x9c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_GPIO_Init+0x9c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a18      	ldr	r2, [pc, #96]	; (8000678 <MX_GPIO_Init+0x9c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_GPIO_Init+0x9c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_GPIO_Init+0x9c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <MX_GPIO_Init+0x9c>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_GPIO_Init+0x9c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <MX_GPIO_Init+0xa0>)
 800064e:	f001 f8e9 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_GPIO_Init+0xa0>)
 800066c:	f000 ff3e 	bl	80014ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40020c00 	.word	0x40020c00

08000680 <updateCheck>:
/**
  * @brief  Handles the update process
  */

void updateCheck()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	if(firmwarePresent() == POE_OK)
 8000686:	f000 f8ab 	bl	80007e0 <firmwarePresent>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	f040 808c 	bne.w	80007aa <updateCheck+0x12a>
		poe_err ret;
#ifdef SERIAL_DEBUG
		SerialDebug( strcpy((char*) debugBuff, "---------Checking For Update Request\r\n") );
#endif

		if((strcmp(poeSettings.update,"true") == 0) && (strcmp(poeSettings.boot,"required") == 0))
 8000692:	4948      	ldr	r1, [pc, #288]	; (80007b4 <updateCheck+0x134>)
 8000694:	4848      	ldr	r0, [pc, #288]	; (80007b8 <updateCheck+0x138>)
 8000696:	f7ff fd97 	bl	80001c8 <strcmp>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d12c      	bne.n	80006fa <updateCheck+0x7a>
 80006a0:	4946      	ldr	r1, [pc, #280]	; (80007bc <updateCheck+0x13c>)
 80006a2:	4847      	ldr	r0, [pc, #284]	; (80007c0 <updateCheck+0x140>)
 80006a4:	f7ff fd90 	bl	80001c8 <strcmp>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d125      	bne.n	80006fa <updateCheck+0x7a>
		{
#ifdef SERIAL_DEBUG
			SerialDebug( strcpy((char*) debugBuff, "---------New Update Is Present\r\n") );
#endif
			ret = eraseFlashSector(FLASH_SECTOR_5);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f000 f9ae 	bl	8000a10 <eraseFlashSector>
 80006b4:	4603      	mov	r3, r0
 80006b6:	71fb      	strb	r3, [r7, #7]
			ret = eraseFlashSector(FLASH_SECTOR_6);
 80006b8:	2006      	movs	r0, #6
 80006ba:	f000 f9a9 	bl	8000a10 <eraseFlashSector>
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]

			if(ret == POE_OK) {
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <updateCheck+0x54>
				ret = copyFirmware(NEW_FIRMWARE_START_ADDR, APPLICATION_START_ADDR);
 80006c8:	493e      	ldr	r1, [pc, #248]	; (80007c4 <updateCheck+0x144>)
 80006ca:	483f      	ldr	r0, [pc, #252]	; (80007c8 <updateCheck+0x148>)
 80006cc:	f000 f8b6 	bl	800083c <copyFirmware>
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
			}

			if(ret == POE_OK) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d109      	bne.n	80006ee <updateCheck+0x6e>
				ret = eraseFlashSector(FLASH_SECTOR_9);
 80006da:	2009      	movs	r0, #9
 80006dc:	f000 f998 	bl	8000a10 <eraseFlashSector>
 80006e0:	4603      	mov	r3, r0
 80006e2:	71fb      	strb	r3, [r7, #7]
				ret = eraseFlashSector(FLASH_SECTOR_10);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f000 f993 	bl	8000a10 <eraseFlashSector>
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
			}

			if(ret != POE_OK) {
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d15a      	bne.n	80007aa <updateCheck+0x12a>
			else {
#ifdef SERIAL_DEBUG
				SerialDebug( strcpy((char*) debugBuff, "---------Firmware Is Updated\r\n") );
				SerialDebug( strcpy((char*) debugBuff, "---------Confirming Update\r\n") );
#endif
				jumpToApplication();
 80006f4:	f000 f90e 	bl	8000914 <jumpToApplication>
			if(ret != POE_OK) {
 80006f8:	e057      	b.n	80007aa <updateCheck+0x12a>
			}
		}
		else if((strcmp(poeSettings.update,"true") == 0) && (strcmp(poeSettings.boot,"normal") == 0))
 80006fa:	492e      	ldr	r1, [pc, #184]	; (80007b4 <updateCheck+0x134>)
 80006fc:	482e      	ldr	r0, [pc, #184]	; (80007b8 <updateCheck+0x138>)
 80006fe:	f7ff fd63 	bl	80001c8 <strcmp>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d12d      	bne.n	8000764 <updateCheck+0xe4>
 8000708:	4930      	ldr	r1, [pc, #192]	; (80007cc <updateCheck+0x14c>)
 800070a:	482d      	ldr	r0, [pc, #180]	; (80007c0 <updateCheck+0x140>)
 800070c:	f7ff fd5c 	bl	80001c8 <strcmp>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d126      	bne.n	8000764 <updateCheck+0xe4>
		{
#ifdef SERIAL_DEBUG
			SerialDebug( strcpy((char*) debugBuff, "---------Firmware Updated Is Successful\r\n") );
			SerialDebug( strcpy((char*) debugBuff, "---------Creating New Backup\r\n") );
#endif
			ret = eraseFlashSector(FLASH_SECTOR_7);
 8000716:	2007      	movs	r0, #7
 8000718:	f000 f97a 	bl	8000a10 <eraseFlashSector>
 800071c:	4603      	mov	r3, r0
 800071e:	71fb      	strb	r3, [r7, #7]
			ret = eraseFlashSector(FLASH_SECTOR_8);
 8000720:	2008      	movs	r0, #8
 8000722:	f000 f975 	bl	8000a10 <eraseFlashSector>
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]

			if(ret == POE_OK) {
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d105      	bne.n	800073c <updateCheck+0xbc>
				ret = copyFirmware(APPLICATION_START_ADDR, APPLICATION_BACKUP_START_ADDR);
 8000730:	4927      	ldr	r1, [pc, #156]	; (80007d0 <updateCheck+0x150>)
 8000732:	4824      	ldr	r0, [pc, #144]	; (80007c4 <updateCheck+0x144>)
 8000734:	f000 f882 	bl	800083c <copyFirmware>
 8000738:	4603      	mov	r3, r0
 800073a:	71fb      	strb	r3, [r7, #7]
			}

			if(ret == POE_OK) {
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d10a      	bne.n	8000758 <updateCheck+0xd8>
				strcpy(poeSettings.update , "false");
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <updateCheck+0x138>)
 8000744:	4a23      	ldr	r2, [pc, #140]	; (80007d4 <updateCheck+0x154>)
 8000746:	6810      	ldr	r0, [r2, #0]
 8000748:	6018      	str	r0, [r3, #0]
 800074a:	8892      	ldrh	r2, [r2, #4]
 800074c:	809a      	strh	r2, [r3, #4]
				ret = writeSettingsToFlash(&poeSettings);
 800074e:	4822      	ldr	r0, [pc, #136]	; (80007d8 <updateCheck+0x158>)
 8000750:	f000 f913 	bl	800097a <writeSettingsToFlash>
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
			}

			if(ret != POE_OK) {
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d125      	bne.n	80007aa <updateCheck+0x12a>
				SerialDebug( strcpy((char*) debugBuff, "---------Backup Created Booting Device\r\n") );
				SerialDebug( strcpy((char*) debugBuff, "---------Device Firmware version: ") );
				SerialDebug( strcpy((char*) debugBuff, poeSettings.fV) );
				SerialDebug( strcpy((char*) debugBuff, "\r\n") );
#endif
				jumpToApplication();
 800075e:	f000 f8d9 	bl	8000914 <jumpToApplication>
			if(ret != POE_OK) {
 8000762:	e022      	b.n	80007aa <updateCheck+0x12a>
			}
		}
		else if(strcmp(poeSettings.def,"false") != 0)
 8000764:	491b      	ldr	r1, [pc, #108]	; (80007d4 <updateCheck+0x154>)
 8000766:	481d      	ldr	r0, [pc, #116]	; (80007dc <updateCheck+0x15c>)
 8000768:	f7ff fd2e 	bl	80001c8 <strcmp>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d018      	beq.n	80007a4 <updateCheck+0x124>
		{
#ifdef SERIAL_DEBUG
			SerialDebug( strcpy((char*) debugBuff, "---------First Boot Detected\r\n") );
			SerialDebug( strcpy((char*) debugBuff, "---------Creating Backup\r\n") );
#endif
			ret = eraseFlashSector(FLASH_SECTOR_7);
 8000772:	2007      	movs	r0, #7
 8000774:	f000 f94c 	bl	8000a10 <eraseFlashSector>
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
			ret = eraseFlashSector(FLASH_SECTOR_8);
 800077c:	2008      	movs	r0, #8
 800077e:	f000 f947 	bl	8000a10 <eraseFlashSector>
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]

			if(ret == POE_OK) {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <updateCheck+0x118>
				ret = copyFirmware(APPLICATION_START_ADDR, APPLICATION_BACKUP_START_ADDR);
 800078c:	4910      	ldr	r1, [pc, #64]	; (80007d0 <updateCheck+0x150>)
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <updateCheck+0x144>)
 8000790:	f000 f854 	bl	800083c <copyFirmware>
 8000794:	4603      	mov	r3, r0
 8000796:	71fb      	strb	r3, [r7, #7]
			}

			if(ret != POE_OK) {
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d105      	bne.n	80007aa <updateCheck+0x12a>
			else {
#ifdef SERIAL_DEBUG
				SerialDebug( strcpy((char*) debugBuff, "---------Backup Created\r\n") );
				SerialDebug( strcpy((char*) debugBuff, "\r\n") );
#endif
				jumpToApplication();
 800079e:	f000 f8b9 	bl	8000914 <jumpToApplication>
	{
#ifdef SERIAL_DEBUG
		SerialDebug( strcpy((char*) debugBuff, "---------Fatal Error Firmware not Present\r\n") );
#endif
	}
}
 80007a2:	e002      	b.n	80007aa <updateCheck+0x12a>
			jumpToApplication();
 80007a4:	f000 f8b6 	bl	8000914 <jumpToApplication>
}
 80007a8:	e7ff      	b.n	80007aa <updateCheck+0x12a>
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	08002348 	.word	0x08002348
 80007b8:	20000166 	.word	0x20000166
 80007bc:	08002350 	.word	0x08002350
 80007c0:	20000152 	.word	0x20000152
 80007c4:	08020000 	.word	0x08020000
 80007c8:	080a0000 	.word	0x080a0000
 80007cc:	0800235c 	.word	0x0800235c
 80007d0:	08060000 	.word	0x08060000
 80007d4:	08002364 	.word	0x08002364
 80007d8:	20000028 	.word	0x20000028
 80007dc:	20000148 	.word	0x20000148

080007e0 <firmwarePresent>:
  * @brief  Print serial logs
  * @return error code
  */

poe_err firmwarePresent()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b090      	sub	sp, #64	; 0x40
 80007e4:	af00      	add	r7, sp, #0
    uint8_t checkData[50];
    uint8_t count = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    readFlash(APPLICATION_START_ADDR, checkData, sizeof(checkData));
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2232      	movs	r2, #50	; 0x32
 80007f0:	4619      	mov	r1, r3
 80007f2:	4811      	ldr	r0, [pc, #68]	; (8000838 <firmwarePresent+0x58>)
 80007f4:	f000 f964 	bl	8000ac0 <readFlash>

    for (size_t i = 0; i < 50; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80007fc:	e00d      	b.n	800081a <firmwarePresent+0x3a>
    {
        if (checkData[i] == 0xFF)
 80007fe:	1d3a      	adds	r2, r7, #4
 8000800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2bff      	cmp	r3, #255	; 0xff
 8000808:	d104      	bne.n	8000814 <firmwarePresent+0x34>
        {
            count++;
 800080a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800080e:	3301      	adds	r3, #1
 8000810:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for (size_t i = 0; i < 50; i++)
 8000814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000816:	3301      	adds	r3, #1
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
 800081a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800081c:	2b31      	cmp	r3, #49	; 0x31
 800081e:	d9ee      	bls.n	80007fe <firmwarePresent+0x1e>
        }
    }

    // Return Error
    if(count >= 50)
 8000820:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000824:	2b31      	cmp	r3, #49	; 0x31
 8000826:	d901      	bls.n	800082c <firmwarePresent+0x4c>
    {
    	return POE_ERR;
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <firmwarePresent+0x4e>
    }

    return POE_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3740      	adds	r7, #64	; 0x40
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	08020000 	.word	0x08020000

0800083c <copyFirmware>:
  * @param[in]  Destination address
  * @return  error code
  */

poe_err copyFirmware(uint32_t source, uint32_t destination)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000842:	af00      	add	r7, sp, #0
 8000844:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000848:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800084c:	6018      	str	r0, [r3, #0]
 800084e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000852:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8000856:	6019      	str	r1, [r3, #0]
	int chunks;
	if(poeSettings.size > 10)
 8000858:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <copyFirmware+0xd4>)
 800085a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800085e:	2b0a      	cmp	r3, #10
 8000860:	dd05      	ble.n	800086e <copyFirmware+0x32>
	{
		chunks = poeSettings.size;
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <copyFirmware+0xd4>)
 8000864:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000868:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800086c:	e003      	b.n	8000876 <copyFirmware+0x3a>
	}
	else
	{
		chunks = 256;
 800086e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000872:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	}
	uint8_t buffer[1024];
	uint32_t updateAdress = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	uint32_t applicationAdress = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	poe_err ret = POE_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b

	for(int i = 0; i < chunks; i++)
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800088e:	e031      	b.n	80008f4 <copyFirmware+0xb8>
	{
		updateAdress = source + (i * 0x400);
 8000890:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000894:	029b      	lsls	r3, r3, #10
 8000896:	461a      	mov	r2, r3
 8000898:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800089c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		applicationAdress = destination + (i* 0x400);
 80008a8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80008ac:	029b      	lsls	r3, r3, #10
 80008ae:	461a      	mov	r2, r3
 80008b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80008b4:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
		readFlash(updateAdress, buffer, sizeof(buffer));
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c8:	4619      	mov	r1, r3
 80008ca:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
 80008ce:	f000 f8f7 	bl	8000ac0 <readFlash>
		ret = writeFlash(applicationAdress, buffer, sizeof(buffer));
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008da:	4619      	mov	r1, r3
 80008dc:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 80008e0:	f000 f8bc 	bl	8000a5c <writeFlash>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
	for(int i = 0; i < chunks; i++)
 80008ea:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80008ee:	3301      	adds	r3, #1
 80008f0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80008f4:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80008f8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dbc7      	blt.n	8000890 <copyFirmware+0x54>

	}

	return ret;
 8000900:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
}
 8000904:	4618      	mov	r0, r3
 8000906:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000028 	.word	0x20000028

08000914 <jumpToApplication>:
/**
  * @brief  Start the main application
  */

static void jumpToApplication(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
#ifdef SERIAL_DEBUG
	SerialDebug( strcpy((char*) debugBuff, "---------Starting Device\r\n") );
	SerialDebug( strcpy((char*) debugBuff, "\r\n\n") );
#endif
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08020000 + 4U)));
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <jumpToApplication+0x4c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000926:	480f      	ldr	r0, [pc, #60]	; (8000964 <jumpToApplication+0x50>)
 8000928:	f000 ff7c 	bl	8001824 <HAL_GPIO_WritePin>

	HAL_RCC_DeInit();
 800092c:	f001 fbf8 	bl	8002120 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000930:	f000 f998 	bl	8000c64 <HAL_DeInit>
	__set_MSP(*(volatile uint32_t*) 0x08020000);
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <jumpToApplication+0x54>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	f383 8808 	msr	MSP, r3
}
 8000940:	bf00      	nop
    SysTick->CTRL = 0;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <jumpToApplication+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <jumpToApplication+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <jumpToApplication+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]

	app_reset_handler();
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4798      	blx	r3
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	08020004 	.word	0x08020004
 8000964:	40020c00 	.word	0x40020c00
 8000968:	08020000 	.word	0x08020000
 800096c:	e000e010 	.word	0xe000e010

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>

0800097a <writeSettingsToFlash>:
 * @param[in] DeviceSettings structure
 * @return  error code
 **/

poe_err writeSettingsToFlash(DeviceSettings* settings)
{
 800097a:	b5b0      	push	{r4, r5, r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
	if(eraseFlashSector(FLASH_SECTOR_11) != POE_OK) {
 8000982:	200b      	movs	r0, #11
 8000984:	f000 f844 	bl	8000a10 <eraseFlashSector>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <writeSettingsToFlash+0x18>
		return POE_ERR;
 800098e:	2301      	movs	r3, #1
 8000990:	e02a      	b.n	80009e8 <writeSettingsToFlash+0x6e>
	}

    HAL_FLASH_Unlock();
 8000992:	f000 fb27 	bl	8000fe4 <HAL_FLASH_Unlock>

    // Write settings to Flash memory
    uint32_t* data = (uint32_t*)settings;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < sizeof(DeviceSettings) / sizeof(uint32_t); ++i)
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e01d      	b.n	80009dc <writeSettingsToFlash+0x62>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE_ADDRESS + (i * 4), data[i]) != HAL_OK)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80009a6:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4619      	mov	r1, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2200      	movs	r2, #0
 80009ba:	461c      	mov	r4, r3
 80009bc:	4615      	mov	r5, r2
 80009be:	4622      	mov	r2, r4
 80009c0:	462b      	mov	r3, r5
 80009c2:	2002      	movs	r0, #2
 80009c4:	f000 faba 	bl	8000f3c <HAL_FLASH_Program>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <writeSettingsToFlash+0x5c>
        {
            // Error handling
#ifdef  SERIAL_DEBUG
            SerialDebug( strcpy((char*) debugBuff, "\n---------Error while writing settings to flash\r\n"));
#endif
            HAL_FLASH_Lock();
 80009ce:	f000 fb2b 	bl	8001028 <HAL_FLASH_Lock>

            return POE_ERR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e008      	b.n	80009e8 <writeSettingsToFlash+0x6e>
    for (int i = 0; i < sizeof(DeviceSettings) / sizeof(uint32_t); ++i)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3301      	adds	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b52      	cmp	r3, #82	; 0x52
 80009e0:	d9de      	bls.n	80009a0 <writeSettingsToFlash+0x26>
        }
    }

    HAL_FLASH_Lock();
 80009e2:	f000 fb21 	bl	8001028 <HAL_FLASH_Lock>

    return POE_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bdb0      	pop	{r4, r5, r7, pc}

080009f0 <readSettingsFromFlash>:
 * @brief Read settings from flash memory
 * @param[in] DeviceSettings structure
 **/

void readSettingsFromFlash(DeviceSettings* settings)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	// Copy data from Flash memory to the structure
	memcpy(settings, (DeviceSettings*)FLASH_STORAGE_ADDRESS, sizeof(DeviceSettings));
 80009f8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80009fc:	4903      	ldr	r1, [pc, #12]	; (8000a0c <readSettingsFromFlash+0x1c>)
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f001 fc88 	bl	8002314 <memcpy>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	080e0000 	.word	0x080e0000

08000a10 <eraseFlashSector>:
 * @param[in] Address of the Sector
 * @return  error code
 **/

poe_err eraseFlashSector(uint32_t sector)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8000a18:	f000 fae4 	bl	8000fe4 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInitStruct;
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
    eraseInitStruct.Sector = sector;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	617b      	str	r3, [r7, #20]
    eraseInitStruct.NbSectors = 1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]

    uint32_t sectorError = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) != HAL_OK)
 8000a30:	f107 0208 	add.w	r2, r7, #8
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fc34 	bl	80012a8 <HAL_FLASHEx_Erase>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <eraseFlashSector+0x3e>
    {
        // Error handling
#ifdef  SERIAL_DEBUG
        SerialDebug( strcpy((char*) debugBuff, "\n---------Error while erasing flash sector\r\n"));
#endif
        HAL_FLASH_Lock();
 8000a46:	f000 faef 	bl	8001028 <HAL_FLASH_Lock>

        return POE_ERR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e002      	b.n	8000a54 <eraseFlashSector+0x44>
    }

    HAL_FLASH_Lock();
 8000a4e:	f000 faeb 	bl	8001028 <HAL_FLASH_Lock>

    return POE_OK;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <writeFlash>:
 * @param[in] Size of the data
 * @return  error code
 **/

poe_err writeFlash(uint32_t start_address, uint8_t *data, size_t length)
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 8000a68:	f000 fabc 	bl	8000fe4 <HAL_FLASH_Unlock>

    // Write data to flash
    for (size_t i = 0; i < length; i += 4)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e01b      	b.n	8000aaa <writeFlash+0x4e>
    {
        uint32_t data_word;

        memcpy(&data_word, &data[i], sizeof(uint32_t));
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	4413      	add	r3, r2
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	613b      	str	r3, [r7, #16]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address, data_word) != HAL_OK)
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	461c      	mov	r4, r3
 8000a82:	4615      	mov	r5, r2
 8000a84:	4622      	mov	r2, r4
 8000a86:	462b      	mov	r3, r5
 8000a88:	68f9      	ldr	r1, [r7, #12]
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 fa56 	bl	8000f3c <HAL_FLASH_Program>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <writeFlash+0x42>
        {
            // Error handling
#ifdef  SERIAL_DEBUG
            SerialDebug( strcpy((char*) debugBuff, "\n---------Error while writing data to flash\r\n"));
#endif
            HAL_FLASH_Lock();
 8000a96:	f000 fac7 	bl	8001028 <HAL_FLASH_Lock>

            return POE_ERR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00c      	b.n	8000ab8 <writeFlash+0x5c>
        }

        start_address += sizeof(uint32_t);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < length; i += 4)
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d3df      	bcc.n	8000a72 <writeFlash+0x16>
    }

    HAL_FLASH_Lock();
 8000ab2:	f000 fab9 	bl	8001028 <HAL_FLASH_Lock>

    return POE_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bdb0      	pop	{r4, r5, r7, pc}

08000ac0 <readFlash>:
 * @param[in] Data
 * @param[in] Size of the data
 **/

void readFlash(uint32_t start_address, uint8_t *data, size_t length)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
    // Read data from flash
    for (size_t i = 0; i < length; i += 4)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00d      	b.n	8000aee <readFlash+0x2e>
    {
        uint32_t data_word = *(__IO uint32_t*)start_address;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	613b      	str	r3, [r7, #16]

        memcpy(&data[i], &data_word, sizeof(uint32_t));
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	601a      	str	r2, [r3, #0]

        start_address += sizeof(uint32_t);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < length; i += 4)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3304      	adds	r3, #4
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d3ed      	bcc.n	8000ad2 <readFlash+0x12>
    }
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	371c      	adds	r7, #28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f000 f9c6 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f8c6 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bd0:	f7ff ffea 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	; (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f001 fb67 	bl	80022cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fc6b 	bl	80004d8 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c10:	0800238c 	.word	0x0800238c
  ldr r2, =_sbss
 8000c14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c18:	20000198 	.word	0x20000198

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f943 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f83e 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff ff56 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <HAL_DeInit+0x50>)
 8000c6c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_DeInit+0x54>)
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_DeInit+0x58>)
 8000c84:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000c8e:	22c1      	movs	r2, #193	; 0xc1
 8000c90:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <HAL_DeInit+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000ca4:	f000 f80c 	bl	8000cc0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	f6fec9ff 	.word	0xf6fec9ff
 8000cb8:	04777933 	.word	0x04777933
 8000cbc:	226011ff 	.word	0x226011ff

08000cc0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f917 	bl	8000f22 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f8ed 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000174 	.word	0x20000174

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000174 	.word	0x20000174

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff47 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff5c 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff8e 	bl	8000e28 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffb0 	bl	8000e90 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <HAL_FLASH_Program+0xa0>)
 8000f50:	7e1b      	ldrb	r3, [r3, #24]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_FLASH_Program+0x1e>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e03b      	b.n	8000fd2 <HAL_FLASH_Program+0x96>
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_FLASH_Program+0xa0>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f64:	f000 f870 	bl	8001048 <FLASH_WaitForLastOperation>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d12b      	bne.n	8000fca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d105      	bne.n	8000f84 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000f78:	783b      	ldrb	r3, [r7, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	68b8      	ldr	r0, [r7, #8]
 8000f7e:	f000 f91b 	bl	80011b8 <FLASH_Program_Byte>
 8000f82:	e016      	b.n	8000fb2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d105      	bne.n	8000f96 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000f8a:	883b      	ldrh	r3, [r7, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	68b8      	ldr	r0, [r7, #8]
 8000f90:	f000 f8ee 	bl	8001170 <FLASH_Program_HalfWord>
 8000f94:	e00d      	b.n	8000fb2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d105      	bne.n	8000fa8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f000 f8c3 	bl	800112c <FLASH_Program_Word>
 8000fa6:	e004      	b.n	8000fb2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f000 f88b 	bl	80010c8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb6:	f000 f847 	bl	8001048 <FLASH_WaitForLastOperation>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_FLASH_Program+0xa4>)
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_FLASH_Program+0xa4>)
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <HAL_FLASH_Program+0xa0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000178 	.word	0x20000178
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_FLASH_Unlock+0x38>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da0b      	bge.n	800100e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_FLASH_Unlock+0x38>)
 8000ff8:	4a09      	ldr	r2, [pc, #36]	; (8001020 <HAL_FLASH_Unlock+0x3c>)
 8000ffa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_FLASH_Unlock+0x38>)
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_FLASH_Unlock+0x40>)
 8001000:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_FLASH_Unlock+0x38>)
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b00      	cmp	r3, #0
 8001008:	da01      	bge.n	800100e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800100e:	79fb      	ldrb	r3, [r7, #7]
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40023c00 	.word	0x40023c00
 8001020:	45670123 	.word	0x45670123
 8001024:	cdef89ab 	.word	0xcdef89ab

08001028 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_FLASH_Lock+0x1c>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_FLASH_Lock+0x1c>)
 8001032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001036:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	40023c00 	.word	0x40023c00

08001048 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <FLASH_WaitForLastOperation+0x78>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800105a:	f7ff fe7d 	bl	8000d58 <HAL_GetTick>
 800105e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001060:	e010      	b.n	8001084 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d00c      	beq.n	8001084 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <FLASH_WaitForLastOperation+0x38>
 8001070:	f7ff fe72 	bl	8000d58 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	d201      	bcs.n	8001084 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e019      	b.n	80010b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <FLASH_WaitForLastOperation+0x7c>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e8      	bne.n	8001062 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <FLASH_WaitForLastOperation+0x7c>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <FLASH_WaitForLastOperation+0x7c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <FLASH_WaitForLastOperation+0x7c>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010ae:	f000 f8a5 	bl	80011fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
  
}  
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000178 	.word	0x20000178
 80010c4:	40023c00 	.word	0x40023c00

080010c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <FLASH_Program_DoubleWord+0x60>)
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <FLASH_Program_DoubleWord+0x60>)
 80010da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <FLASH_Program_DoubleWord+0x60>)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	4a10      	ldr	r2, [pc, #64]	; (8001128 <FLASH_Program_DoubleWord+0x60>)
 80010e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80010ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <FLASH_Program_DoubleWord+0x60>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <FLASH_Program_DoubleWord+0x60>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80010fe:	f3bf 8f6f 	isb	sy
}
 8001102:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	000a      	movs	r2, r1
 8001112:	2300      	movs	r3, #0
 8001114:	68f9      	ldr	r1, [r7, #12]
 8001116:	3104      	adds	r1, #4
 8001118:	4613      	mov	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40023c00 	.word	0x40023c00

0800112c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <FLASH_Program_Word+0x40>)
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	4a0c      	ldr	r2, [pc, #48]	; (800116c <FLASH_Program_Word+0x40>)
 800113c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001140:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <FLASH_Program_Word+0x40>)
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <FLASH_Program_Word+0x40>)
 8001148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <FLASH_Program_Word+0x40>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	4a06      	ldr	r2, [pc, #24]	; (800116c <FLASH_Program_Word+0x40>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40023c00 	.word	0x40023c00

08001170 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <FLASH_Program_HalfWord+0x44>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <FLASH_Program_HalfWord+0x44>)
 8001182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001186:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <FLASH_Program_HalfWord+0x44>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <FLASH_Program_HalfWord+0x44>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <FLASH_Program_HalfWord+0x44>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <FLASH_Program_HalfWord+0x44>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	801a      	strh	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <FLASH_Program_Byte+0x40>)
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <FLASH_Program_Byte+0x40>)
 80011ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <FLASH_Program_Byte+0x40>)
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <FLASH_Program_Byte+0x40>)
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <FLASH_Program_Byte+0x40>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <FLASH_Program_Byte+0x40>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	78fa      	ldrb	r2, [r7, #3]
 80011e8:	701a      	strb	r2, [r3, #0]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	d008      	beq.n	800121e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f043 0310 	orr.w	r3, r3, #16
 8001214:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 8001216:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 800121a:	2210      	movs	r2, #16
 800121c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d008      	beq.n	800123c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 8001234:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 8001238:	2220      	movs	r2, #32
 800123a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 8001252:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 8001256:	2240      	movs	r2, #64	; 0x40
 8001258:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	2b00      	cmp	r3, #0
 8001264:	d008      	beq.n	8001278 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 8001270:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <FLASH_SetErrorCode+0xa8>)
 800128e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <FLASH_SetErrorCode+0xa4>)
 8001292:	2202      	movs	r2, #2
 8001294:	60da      	str	r2, [r3, #12]
  }
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40023c00 	.word	0x40023c00
 80012a4:	20000178 	.word	0x20000178

080012a8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012ba:	4b31      	ldr	r3, [pc, #196]	; (8001380 <HAL_FLASHEx_Erase+0xd8>)
 80012bc:	7e1b      	ldrb	r3, [r3, #24]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_FLASHEx_Erase+0x1e>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e058      	b.n	8001378 <HAL_FLASHEx_Erase+0xd0>
 80012c6:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <HAL_FLASHEx_Erase+0xd8>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012d0:	f7ff feba 	bl	8001048 <FLASH_WaitForLastOperation>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d148      	bne.n	8001370 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d115      	bne.n	800131a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4610      	mov	r0, r2
 80012fc:	f000 f844 	bl	8001388 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001300:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001304:	f7ff fea0 	bl	8001048 <FLASH_WaitForLastOperation>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_FLASHEx_Erase+0xdc>)
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <HAL_FLASHEx_Erase+0xdc>)
 8001312:	f023 0304 	bic.w	r3, r3, #4
 8001316:	6113      	str	r3, [r2, #16]
 8001318:	e028      	b.n	800136c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	e01c      	b.n	800135c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4619      	mov	r1, r3
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f000 f850 	bl	80013d0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001330:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001334:	f7ff fe88 	bl	8001048 <FLASH_WaitForLastOperation>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_FLASHEx_Erase+0xdc>)
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_FLASHEx_Erase+0xdc>)
 8001342:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001346:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	601a      	str	r2, [r3, #0]
          break;
 8001354:	e00a      	b.n	800136c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3301      	adds	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4413      	add	r3, r2
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3da      	bcc.n	8001322 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800136c:	f000 f878 	bl	8001460 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_FLASHEx_Erase+0xd8>)
 8001372:	2200      	movs	r2, #0
 8001374:	761a      	strb	r2, [r3, #24]

  return status;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000178 	.word	0x20000178
 8001384:	40023c00 	.word	0x40023c00

08001388 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <FLASH_MassErase+0x44>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <FLASH_MassErase+0x44>)
 800139a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800139e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <FLASH_MassErase+0x44>)
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <FLASH_MassErase+0x44>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <FLASH_MassErase+0x44>)
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	4313      	orrs	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <FLASH_MassErase+0x44>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6113      	str	r3, [r2, #16]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e010      	b.n	800140e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d103      	bne.n	80013fa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80013f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e009      	b.n	800140e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d103      	bne.n	8001408 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e002      	b.n	800140e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001408:	f44f 7340 	mov.w	r3, #768	; 0x300
 800140c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <FLASH_Erase_Sector+0x8c>)
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <FLASH_Erase_Sector+0x8c>)
 8001414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001418:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <FLASH_Erase_Sector+0x8c>)
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	490f      	ldr	r1, [pc, #60]	; (800145c <FLASH_Erase_Sector+0x8c>)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <FLASH_Erase_Sector+0x8c>)
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	4a0c      	ldr	r2, [pc, #48]	; (800145c <FLASH_Erase_Sector+0x8c>)
 800142c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001430:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <FLASH_Erase_Sector+0x8c>)
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4313      	orrs	r3, r2
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <FLASH_Erase_Sector+0x8c>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <FLASH_Erase_Sector+0x8c>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <FLASH_Erase_Sector+0x8c>)
 800144a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144e:	6113      	str	r3, [r2, #16]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40023c00 	.word	0x40023c00

08001460 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <FLASH_FlushCaches+0x88>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800146c:	2b00      	cmp	r3, #0
 800146e:	d017      	beq.n	80014a0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <FLASH_FlushCaches+0x88>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <FLASH_FlushCaches+0x88>)
 8001476:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800147a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <FLASH_FlushCaches+0x88>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <FLASH_FlushCaches+0x88>)
 8001482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <FLASH_FlushCaches+0x88>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <FLASH_FlushCaches+0x88>)
 800148e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001492:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <FLASH_FlushCaches+0x88>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <FLASH_FlushCaches+0x88>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <FLASH_FlushCaches+0x88>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d017      	beq.n	80014dc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <FLASH_FlushCaches+0x88>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <FLASH_FlushCaches+0x88>)
 80014b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014b6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <FLASH_FlushCaches+0x88>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <FLASH_FlushCaches+0x88>)
 80014be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <FLASH_FlushCaches+0x88>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <FLASH_FlushCaches+0x88>)
 80014ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014ce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <FLASH_FlushCaches+0x88>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <FLASH_FlushCaches+0x88>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
  }
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023c00 	.word	0x40023c00

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e16b      	b.n	80017e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001508:	2201      	movs	r2, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 815a 	bne.w	80017da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d005      	beq.n	800153e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	2b02      	cmp	r3, #2
 800153c:	d130      	bne.n	80015a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 0201 	and.w	r2, r3, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d017      	beq.n	80015dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d123      	bne.n	8001630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	69b9      	ldr	r1, [r7, #24]
 800162c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0203 	and.w	r2, r3, #3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80b4 	beq.w	80017da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b60      	ldr	r3, [pc, #384]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a5f      	ldr	r2, [pc, #380]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168e:	4a5b      	ldr	r2, [pc, #364]	; (80017fc <HAL_GPIO_Init+0x310>)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	3302      	adds	r3, #2
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x314>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d02b      	beq.n	8001712 <HAL_GPIO_Init+0x226>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x318>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d025      	beq.n	800170e <HAL_GPIO_Init+0x222>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_GPIO_Init+0x31c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d01f      	beq.n	800170a <HAL_GPIO_Init+0x21e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_GPIO_Init+0x320>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x21a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_GPIO_Init+0x324>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x216>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_GPIO_Init+0x328>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x212>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_GPIO_Init+0x32c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x20e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4b      	ldr	r2, [pc, #300]	; (800181c <HAL_GPIO_Init+0x330>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x20a>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e00e      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016f6:	2308      	movs	r3, #8
 80016f8:	e00c      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016fa:	2306      	movs	r3, #6
 80016fc:	e00a      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016fe:	2305      	movs	r3, #5
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001702:	2304      	movs	r3, #4
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x228>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x228>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001712:	2300      	movs	r3, #0
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001724:	4935      	ldr	r1, [pc, #212]	; (80017fc <HAL_GPIO_Init+0x310>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_GPIO_Init+0x334>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001780:	4a27      	ldr	r2, [pc, #156]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017aa:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3301      	adds	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	f67f ae90 	bls.w	8001508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40013800 	.word	0x40013800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020400 	.word	0x40020400
 8001808:	40020800 	.word	0x40020800
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40021000 	.word	0x40021000
 8001814:	40021400 	.word	0x40021400
 8001818:	40021800 	.word	0x40021800
 800181c:	40021c00 	.word	0x40021c00
 8001820:	40013c00 	.word	0x40013c00

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001840:	e003      	b.n	800184a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	619a      	str	r2, [r3, #24]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e267      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d075      	beq.n	8001962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001876:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b04      	cmp	r3, #4
 8001880:	d00c      	beq.n	800189c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001882:	4b85      	ldr	r3, [pc, #532]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800188a:	2b08      	cmp	r3, #8
 800188c:	d112      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188e:	4b82      	ldr	r3, [pc, #520]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800189a:	d10b      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	4b7e      	ldr	r3, [pc, #504]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d05b      	beq.n	8001960 <HAL_RCC_OscConfig+0x108>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d157      	bne.n	8001960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e242      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018bc:	d106      	bne.n	80018cc <HAL_RCC_OscConfig+0x74>
 80018be:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a75      	ldr	r2, [pc, #468]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e01d      	b.n	8001908 <HAL_RCC_OscConfig+0xb0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x98>
 80018d6:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6f      	ldr	r2, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6c      	ldr	r2, [pc, #432]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0xb0>
 80018f0:	4b69      	ldr	r3, [pc, #420]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a68      	ldr	r2, [pc, #416]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80018f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a65      	ldr	r2, [pc, #404]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fa22 	bl	8000d58 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fa1e 	bl	8000d58 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e207      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b5b      	ldr	r3, [pc, #364]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0xc0>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fa0e 	bl	8000d58 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fa0a 	bl	8000d58 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1f3      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	4b51      	ldr	r3, [pc, #324]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0xe8>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d063      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196e:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001982:	2b08      	cmp	r3, #8
 8001984:	d11c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x152>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e1c7      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4937      	ldr	r1, [pc, #220]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	e03a      	b.n	8001a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <HAL_RCC_OscConfig+0x244>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f9c3 	bl	8000d58 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff f9bf 	bl	8000d58 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1a8      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4925      	ldr	r1, [pc, #148]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_RCC_OscConfig+0x244>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f9a2 	bl	8000d58 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a18:	f7ff f99e 	bl	8000d58 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e187      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d036      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d016      	beq.n	8001a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_RCC_OscConfig+0x248>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f982 	bl	8000d58 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff f97e 	bl	8000d58 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e167      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x200>
 8001a76:	e01b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_OscConfig+0x248>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f96b 	bl	8000d58 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	e00e      	b.n	8001aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a86:	f7ff f967 	bl	8000d58 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d907      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e150      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	42470000 	.word	0x42470000
 8001aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ea      	bne.n	8001a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8097 	beq.w	8001bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac2:	4b81      	ldr	r3, [pc, #516]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b7d      	ldr	r3, [pc, #500]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a7c      	ldr	r2, [pc, #496]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b7a      	ldr	r3, [pc, #488]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	4b77      	ldr	r3, [pc, #476]	; (8001ccc <HAL_RCC_OscConfig+0x474>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afa:	4b74      	ldr	r3, [pc, #464]	; (8001ccc <HAL_RCC_OscConfig+0x474>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a73      	ldr	r2, [pc, #460]	; (8001ccc <HAL_RCC_OscConfig+0x474>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b06:	f7ff f927 	bl	8000d58 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7ff f923 	bl	8000d58 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e10c      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <HAL_RCC_OscConfig+0x474>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x2ea>
 8001b34:	4b64      	ldr	r3, [pc, #400]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a63      	ldr	r2, [pc, #396]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	e01c      	b.n	8001b7c <HAL_RCC_OscConfig+0x324>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x30c>
 8001b4a:	4b5f      	ldr	r3, [pc, #380]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	4a5e      	ldr	r2, [pc, #376]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70
 8001b56:	4b5c      	ldr	r3, [pc, #368]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a5b      	ldr	r2, [pc, #364]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0x324>
 8001b64:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b70:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a54      	ldr	r2, [pc, #336]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001b76:	f023 0304 	bic.w	r3, r3, #4
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d015      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f8e8 	bl	8000d58 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f8e4 	bl	8000d58 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e0cb      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba2:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0ee      	beq.n	8001b8c <HAL_RCC_OscConfig+0x334>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f8d2 	bl	8000d58 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f8ce 	bl	8000d58 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e0b5      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1ee      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a38      	ldr	r2, [pc, #224]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a1 	beq.w	8001d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d05c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d141      	bne.n	8001c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_RCC_OscConfig+0x478>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff f8a2 	bl	8000d58 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f89e 	bl	8000d58 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e087      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	019b      	lsls	r3, r3, #6
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	061b      	lsls	r3, r3, #24
 8001c5a:	491b      	ldr	r1, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x478>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff f877 	bl	8000d58 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff f873 	bl	8000d58 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e05c      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x416>
 8001c8c:	e054      	b.n	8001d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_OscConfig+0x478>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f860 	bl	8000d58 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff f85c 	bl	8000d58 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e045      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x444>
 8001cba:	e03d      	b.n	8001d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e038      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_RCC_OscConfig+0x4ec>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d028      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d121      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d11a      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d111      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	085b      	lsrs	r3, r3, #1
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800

08001d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0cc      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d90c      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0b8      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	494d      	ldr	r1, [pc, #308]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d044      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d119      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e06f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e067      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4934      	ldr	r1, [pc, #208]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e38:	f7fe ff8e 	bl	8000d58 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7fe ff8a 	bl	8000d58 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e04f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 020c 	and.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1eb      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d20c      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e032      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4916      	ldr	r1, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ece:	f000 f821 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	490a      	ldr	r1, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	5ccb      	ldrb	r3, [r1, r3]
 8001ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1c8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe feee 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00
 8001f04:	40023800 	.word	0x40023800
 8001f08:	0800236c 	.word	0x0800236c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f18:	b094      	sub	sp, #80	; 0x50
 8001f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f20:	2300      	movs	r3, #0
 8001f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f24:	2300      	movs	r3, #0
 8001f26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f2c:	4b79      	ldr	r3, [pc, #484]	; (8002114 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d00d      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x40>
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	f200 80e1 	bhi.w	8002100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x34>
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d003      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f46:	e0db      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b73      	ldr	r3, [pc, #460]	; (8002118 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f4c:	e0db      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f4e:	4b73      	ldr	r3, [pc, #460]	; (800211c <HAL_RCC_GetSysClockFreq+0x208>)
 8001f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f52:	e0d8      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f54:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f5e:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d063      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	2200      	movs	r2, #0
 8001f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7e:	2300      	movs	r3, #0
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
 8001f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f86:	4622      	mov	r2, r4
 8001f88:	462b      	mov	r3, r5
 8001f8a:	f04f 0000 	mov.w	r0, #0
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	0159      	lsls	r1, r3, #5
 8001f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f98:	0150      	lsls	r0, r2, #5
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	1a51      	subs	r1, r2, r1
 8001fa2:	6139      	str	r1, [r7, #16]
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fb8:	4659      	mov	r1, fp
 8001fba:	018b      	lsls	r3, r1, #6
 8001fbc:	4651      	mov	r1, sl
 8001fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fc2:	4651      	mov	r1, sl
 8001fc4:	018a      	lsls	r2, r1, #6
 8001fc6:	4651      	mov	r1, sl
 8001fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8001fcc:	4659      	mov	r1, fp
 8001fce:	eb63 0901 	sbc.w	r9, r3, r1
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fe6:	4690      	mov	r8, r2
 8001fe8:	4699      	mov	r9, r3
 8001fea:	4623      	mov	r3, r4
 8001fec:	eb18 0303 	adds.w	r3, r8, r3
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	eb49 0303 	adc.w	r3, r9, r3
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002006:	4629      	mov	r1, r5
 8002008:	024b      	lsls	r3, r1, #9
 800200a:	4621      	mov	r1, r4
 800200c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002010:	4621      	mov	r1, r4
 8002012:	024a      	lsls	r2, r1, #9
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201a:	2200      	movs	r2, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
 800201e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002024:	f7fe f8da 	bl	80001dc <__aeabi_uldivmod>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4613      	mov	r3, r2
 800202e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002030:	e058      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002032:	4b38      	ldr	r3, [pc, #224]	; (8002114 <HAL_RCC_GetSysClockFreq+0x200>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	099b      	lsrs	r3, r3, #6
 8002038:	2200      	movs	r2, #0
 800203a:	4618      	mov	r0, r3
 800203c:	4611      	mov	r1, r2
 800203e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002042:	623b      	str	r3, [r7, #32]
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800204c:	4642      	mov	r2, r8
 800204e:	464b      	mov	r3, r9
 8002050:	f04f 0000 	mov.w	r0, #0
 8002054:	f04f 0100 	mov.w	r1, #0
 8002058:	0159      	lsls	r1, r3, #5
 800205a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800205e:	0150      	lsls	r0, r2, #5
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4641      	mov	r1, r8
 8002066:	ebb2 0a01 	subs.w	sl, r2, r1
 800206a:	4649      	mov	r1, r9
 800206c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800207c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002084:	ebb2 040a 	subs.w	r4, r2, sl
 8002088:	eb63 050b 	sbc.w	r5, r3, fp
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	00eb      	lsls	r3, r5, #3
 8002096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800209a:	00e2      	lsls	r2, r4, #3
 800209c:	4614      	mov	r4, r2
 800209e:	461d      	mov	r5, r3
 80020a0:	4643      	mov	r3, r8
 80020a2:	18e3      	adds	r3, r4, r3
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	464b      	mov	r3, r9
 80020a8:	eb45 0303 	adc.w	r3, r5, r3
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ba:	4629      	mov	r1, r5
 80020bc:	028b      	lsls	r3, r1, #10
 80020be:	4621      	mov	r1, r4
 80020c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020c4:	4621      	mov	r1, r4
 80020c6:	028a      	lsls	r2, r1, #10
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ce:	2200      	movs	r2, #0
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	61fa      	str	r2, [r7, #28]
 80020d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d8:	f7fe f880 	bl	80001dc <__aeabi_uldivmod>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4613      	mov	r3, r2
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	3301      	adds	r3, #1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020fe:	e002      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetSysClockFreq+0x204>)
 8002102:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002108:	4618      	mov	r0, r3
 800210a:	3750      	adds	r7, #80	; 0x50
 800210c:	46bd      	mov	sp, r7
 800210e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	00f42400 	.word	0x00f42400
 800211c:	007a1200 	.word	0x007a1200

08002120 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002126:	f7fe fe17 	bl	8000d58 <HAL_GetTick>
 800212a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800212c:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a5c      	ldr	r2, [pc, #368]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213a:	f7fe fe0d 	bl	8000d58 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0a7      	b.n	800229c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800214c:	4b55      	ldr	r3, [pc, #340]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002158:	4b52      	ldr	r3, [pc, #328]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a51      	ldr	r2, [pc, #324]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800215e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002162:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002164:	f7fe fdf8 	bl	8000d58 <HAL_GetTick>
 8002168:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800216a:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002172:	f7fe fdf1 	bl	8000d58 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e089      	b.n	800229c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002188:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002194:	f7fe fde0 	bl	8000d58 <HAL_GetTick>
 8002198:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800219a:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a41      	ldr	r2, [pc, #260]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 80021a0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80021a4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe fdd6 	bl	8000d58 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e070      	b.n	800229c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80021c6:	f7fe fdc7 	bl	8000d58 <HAL_GetTick>
 80021ca:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80021cc:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a34      	ldr	r2, [pc, #208]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 80021d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fdbd 	bl	8000d58 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e057      	b.n	800229c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80021ec:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80021f8:	f7fe fdae 	bl	8000d58 <HAL_GetTick>
 80021fc:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002204:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002208:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800220c:	f7fe fda4 	bl	8000d58 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e03e      	b.n	800229c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800221e:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_RCC_DeInit+0x188>)
 800222e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002232:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <HAL_RCC_DeInit+0x18c>)
 8002234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800223e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002242:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800224a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800224e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002256:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800225a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002262:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002266:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800226a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_RCC_DeInit+0x184>)
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_DeInit+0x190>)
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <HAL_RCC_DeInit+0x194>)
 8002284:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_RCC_DeInit+0x198>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fd20 	bl	8000cd0 <HAL_InitTick>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800229a:	2300      	movs	r3, #0
  }
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	04003010 	.word	0x04003010
 80022ac:	20003000 	.word	0x20003000
 80022b0:	20000000 	.word	0x20000000
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	20000004 	.word	0x20000004

080022bc <memset>:
 80022bc:	4402      	add	r2, r0
 80022be:	4603      	mov	r3, r0
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d100      	bne.n	80022c6 <memset+0xa>
 80022c4:	4770      	bx	lr
 80022c6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ca:	e7f9      	b.n	80022c0 <memset+0x4>

080022cc <__libc_init_array>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	4d0d      	ldr	r5, [pc, #52]	; (8002304 <__libc_init_array+0x38>)
 80022d0:	4c0d      	ldr	r4, [pc, #52]	; (8002308 <__libc_init_array+0x3c>)
 80022d2:	1b64      	subs	r4, r4, r5
 80022d4:	10a4      	asrs	r4, r4, #2
 80022d6:	2600      	movs	r6, #0
 80022d8:	42a6      	cmp	r6, r4
 80022da:	d109      	bne.n	80022f0 <__libc_init_array+0x24>
 80022dc:	4d0b      	ldr	r5, [pc, #44]	; (800230c <__libc_init_array+0x40>)
 80022de:	4c0c      	ldr	r4, [pc, #48]	; (8002310 <__libc_init_array+0x44>)
 80022e0:	f000 f826 	bl	8002330 <_init>
 80022e4:	1b64      	subs	r4, r4, r5
 80022e6:	10a4      	asrs	r4, r4, #2
 80022e8:	2600      	movs	r6, #0
 80022ea:	42a6      	cmp	r6, r4
 80022ec:	d105      	bne.n	80022fa <__libc_init_array+0x2e>
 80022ee:	bd70      	pop	{r4, r5, r6, pc}
 80022f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f4:	4798      	blx	r3
 80022f6:	3601      	adds	r6, #1
 80022f8:	e7ee      	b.n	80022d8 <__libc_init_array+0xc>
 80022fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80022fe:	4798      	blx	r3
 8002300:	3601      	adds	r6, #1
 8002302:	e7f2      	b.n	80022ea <__libc_init_array+0x1e>
 8002304:	08002384 	.word	0x08002384
 8002308:	08002384 	.word	0x08002384
 800230c:	08002384 	.word	0x08002384
 8002310:	08002388 	.word	0x08002388

08002314 <memcpy>:
 8002314:	440a      	add	r2, r1
 8002316:	4291      	cmp	r1, r2
 8002318:	f100 33ff 	add.w	r3, r0, #4294967295
 800231c:	d100      	bne.n	8002320 <memcpy+0xc>
 800231e:	4770      	bx	lr
 8002320:	b510      	push	{r4, lr}
 8002322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800232a:	4291      	cmp	r1, r2
 800232c:	d1f9      	bne.n	8002322 <memcpy+0xe>
 800232e:	bd10      	pop	{r4, pc}

08002330 <_init>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	bf00      	nop
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr

0800233c <_fini>:
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233e:	bf00      	nop
 8002340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002342:	bc08      	pop	{r3}
 8002344:	469e      	mov	lr, r3
 8002346:	4770      	bx	lr
